# Look at the output of this example saved into localci/out/src_loops_py*

# -------------------- EXAMPLE 1
# from textwrap (stdlib)
#def _fix_sentence_endings(self, chunks):
#    """_fix_sentence_endings(chunks : [string])
#
#    Correct for sentence endings buried in 'chunks'.  Eg. when the
#    original text contains "... foo.\\nBar ...", munge_whitespace()
#    and split() will convert that to [..., "foo.", " ", "Bar", ...]
#    which has one too few spaces; this method simply changes the one
#    space to two.
#    """
#    i = 0
#    patsearch = self.sentence_end_re.search
#    while i < len(chunks)-1:
#        if chunks[i+1] == " " and patsearch(chunks[i]):
#            chunks[i+1] = "  "
#            i += 2
#        else:
#            i += 1

def _fix_sentence_endings(self, chunks):
    patsearch = self.sentence_end_re.search
    # recompute_end=False, since we would get IndexError
    # before we could change the chunks size, the end is thus len-1
    with For(chunks, indexed=True, recompute_end=False, end='len(chunks) - 1') as loop:
        if loop.iter[loop.i + 1] == " " and patsearch(loop.it):
            loop.iter[loop.i + 1] = "  "
            loop.i += 1

# still looks bad, let's improve:
#def _fix_sentence_endings(self, chunks):
#    patsearch = self.sentence_end_re.search
#    with For(chunks, indexed=True, recompute_end=False) as loop:
#        if loop.next and loop.next == " " and patsearch(loop.it):
#            loop.next = "  "
#            loop.i += 1
# uhmmm, i'm not sure .next with None is a good idea.
# feels like handling the IndexError here would be also bad
# stick with the previous implementation until we see how to improve
# until then, this last example transpiles into non-working code
# as loop.next isn't special yet, something you can use for your own use
# maybe just implement .next that may raise and keep the -1?


print()
# -------------------- EXAMPLE 2
# Autistic Spectrum Demo
with For(range(10)) as outer:
    if outer.i == 0:
        print('continuiing, not to trigger inner.orelse the first time')
        outer.Continue
    with For(range(outer.it)) as inner:
        print(outer.i, outer.it, inner.i, inner.it)
        if inner.item == 2:
            print('breaking out of outer loop')
            outer.Break
    with inner.orelse:
        print(f'{outer.i} inner didn\'t break at all {list(range(outer.it))}')
with outer.orelse:
    print('outer didn\'t break at all')
print('so we have', outer.index, outer.item, inner.i, inner.it)


print()
# -------------------- EXAMPLE 3
# You can raise a Break to jump
# (and try-else to run unless jumped)
# Now you need to disable strict on the loops that should allow it
# RETRACTED

# -------------------- EXAMPLE 4
# You can forbid jumps
# RETRACTED
#
# -------------------- EXAMPLE 5
# actually a test for a bug...
with While(True) as again:
    again.Break


# -------------------- EXAMPLE 6
# You can bind names in the usual way
with For(chunk in ['asd', 'qwe']) as chunkloop:
    with For(ch in chunk) as charloop:
        if ch == 'w':
            chunkloop.Break
print(f'stopped at {chunkloop.i} with "{chunk}"[{charloop.i}] = {ch}')

# -------------------- EXAMPLE 7
# Properly explain the name binding behaviour with indexed=True
# - Performance tracking acreoss python versions quirks our CI
#from time import perf_counter
#perf_repeat = 1_000_000
perf_repeat = 5
chunks = ['asd', 'qwe']
with For(chunk in chunks, indexed=True) as chunkloop:
    with For(ch in chunk) as charloop:
        if ch == 'w':
            print(f'chunk is {chunk}')
            chunkloop.item = 'rty'
            print(f'chunk is still {chunk}')
            print(f'but see {chunkloop.it} and {chunks}?')
            #_t = perf_counter()
            for _ in range(perf_repeat):
                chunk
            #print(f'accessing chunk took {perf_counter() - _t:.2f}')
            #_t = perf_counter()
            for _ in range(perf_repeat):
                chunkloop.it
            #print(f'accessing chunkloop.it took {perf_counter() - _t:.2f}')
            chunkloop.Break


# -------------------- EXAMPLE 8
# For should not enumerate unless needed
with For(c in 'asd') as chloop:  # do enumerate
    print(c.upper())
print(chloop.i)  # makes enumerate needed
with For('asd') as chloop2:  # do not enumerate
    print(chloop2.it.upper())

# -------------------- EXAMPLE 9
# unpacking works as usual
with For((x, y) in [(0, 0), (1, 0), (2, 1)]) as pointsloop:
    print(x, y)


# -------------------- EXAMPLE 10
# we have orempty :D
with For(range(10)) as full: ...
with full.orempty:
    assert False, 'FAILED (slow)'
with For(range(0)) as nonfull: ...
with nonfull.orempty:
    print('EMPTY (slow)')

# List, Tuples and List Comprehesions allow some trick
with For([1, 2]) as full: ...
with full.orempty:
    assert False, 'FAILED (fast)'
with For([]) as nonfull: ...
with nonfull.orempty:
    print('EMPTY (fast)')

# also indexed (did not use "i" 'cause you may want to empty it while iterating)
# well, in that case, do you still want to trigger the orempty?
# well, in that case, should have been oNempty instead
with For([1, 2], indexed=True) as full: ...
with full.orempty:
    assert False, 'FAILED (indexed)'
with For([], indexed=True) as nonfull: ...
with nonfull.orempty:
    print('EMPTY (indexed)')

# -------------------- EXAMPLE 11
# We need more tests!!
with For(range(3)) as l0:
    with For('abcd') as l1:
        print(l1.it)
        with For('zzz') as l2:
            if l1.it == 'c':
                l0.Continue
print()

with For(range(3)) as l0:
    with For(range(3)) as l1:
        with For(range(3)) as l2:
            l1.Break
    with For(range(3)) as l1a:
        print('ok')
        l0.Break

print()
